<#
.SYNOPSIS
    This script processes SmartView test data files and generates corresponding header, resource, and CPP files.

.DESCRIPTION
    The script takes an input directory parameter and processes files in the SmartViewTestData\In and SmartViewTestData\Out directories.
    It generates defines, resources, and tests based on the file names and writes the output to header, resource, and CPP files.

.PARAMETER IntDir
    The directory where the output header, resource, and CPP files will be saved.

.NOTES
    Author: sgriffin
    Date: 01/08/2025
    Version: 1.0

.EXAMPLE
    .\Build-SmartViewTests.ps1 -IntDir "C:\OutputDirectory"
#>

param (
    [string]$IntDir
)

Write-Output "Running script: $PSScriptRoot\$(Split-Path -Path $MyInvocation.MyCommand.Definition -Leaf)"

if (-not $IntDir) {
    throw "IntDir parameter is required."
}

$rootDir = Split-Path -Path $PSScriptRoot -Parent
$inSubDir = "SmartViewTestData\In"
$outSubDir = "SmartViewTestData\Out"
$inDir = Join-Path -Path $rootDir -ChildPath $inSubDir
$outDir = Join-Path -Path $rootDir -ChildPath $outSubDir
$outputHeaderFile = Join-Path -Path $IntDir -ChildPath "SmartViewTests.h"
$outputRCFile = Join-Path -Path $IntDir -ChildPath "SmartViewTests.rc"
$outputCPPFile = Join-Path -Path $IntDir -ChildPath "SmartViewTests.cpp"

Write-Output "IntDir:             $IntDir"
Write-Output "inDir:              $inDir"
Write-Output "outDir:             $outDir"
Write-Output "outputHeaderFile:   $outputHeaderFile"
Write-Output "outputRCFile:       $outputRCFile"
Write-Output "outputCPPFile:      $outputCPPFile"

if (-Not (Test-Path -Path $inDir)) {
    throw "SmartView In directory does not exist: $inDir"
}
if (-Not (Test-Path -Path $outDir)) {
    throw "SmartView Out directory does not exist: $outDir"
}

$defines = @()
$resources = @()
$tests = @()

$inDirfiles = Get-ChildItem -Path $inDir -File
$inDirPattern = "(\d+)-(.*?)(\d+)"

foreach ($file in $inDirfiles) {
    $name = $file.BaseName

    if ($name -match $inDirPattern) {
        $testNum = [int]$matches[1]
        $testName = $matches[2].ToUpper()
        $subIndex = [int]$matches[3]
        $index = $testNum * 1000 + $subIndex
        $name = "IDR_SV$($testNum)$($testName)$($subIndex)IN"
        $name = $name.ToUpper()
        $define = "#define $name $index"
        $defines += $define
        $resource = "$name TEXTFILE ""$inSubDir\$($file.Name)"""
        $resource = $resource -replace '\\', '/'
        $resources += $resource
        $test = "`tTEST($testNum, $testNum$testName, $subIndex)"
        $tests += $test
    }
}

$outDirFiles = Get-ChildItem -Path $outDir -File
$outDirPattern = "(\d+)-(.*?)-(.*?)(\d+)"

foreach ($file in $outDirFiles) {
    $name = $file.BaseName

    if ($name -match $outDirPattern) {
        $testNum = [int]$matches[1]
        $testName = $matches[2]
        $subIndex = [int]$matches[4]
        $index = 1000000 + $testNum * 1000 + $subIndex
        $name = "IDR_SV$($testNum)$($testName)$($subIndex)OUT"
        $name = $name.ToUpper()
        $define = "#define $name $index"
        $defines += $define
        $resource = "$name TEXTFILE ""$outSubDir\$($file.Name)"""
        $resource = $resource -replace '\\', '/'
        $resources += $resource
    }
}

$defines = $defines -join "`r`n"
$resources = $resources -join "`r`n"
$tests = $tests -join "`r`n"

# Generate the .h file
$headerContent = @"
// AUTOGENERATED FILE. DO NOT MODIFY.
// Used by $outputRCFile
#define TEXTFILE 256

$defines
"@

# Generate the .rc file
$rcContent = @"
// AUTOGENERATED FILE. DO NOT MODIFY.
#include "$outputHeaderFile"

$resources
"@

# Generate the .cpp file
$cppContent = @"
// AUTOGENERATED FILE. DO NOT MODIFY.
#include <UnitTest/stdafx.h>
#include <UnitTest/UnitTest.h>
#include <$outputHeaderFile>

namespace SmartViewTest
{
#define TEST(PARSERTYPE, NAME, NUM) \
    TEST_METHOD(SV##NAME##PARSERTYPE##_##NUM) { unittest::test(static_cast<parserType>(##PARSERTYPE), IDR_SV##NAME##NUM##IN, IDR_SV##NAME##NUM##OUT); }

    TEST_CLASS(SmartViewTest)
    {
    public:
        TEST_CLASS_INITIALIZE(initialize) { unittest::init(); }

        TEST_METHOD(SmartViewAddInTest1)
        {
            unittest::test(
                std::wstring(L"SmartViewAddInTest1"),
                parserType::END,
                std::vector<BYTE>{1, 2, 3, 4},
                std::wstring(L"Unknown Parser 39\r\n"
                             L"\tcb: 4 lpb: 01020304"));
        }

$tests
    };
} // namespace SmartViewTest
"@

$rcContent | Out-File -FilePath $outputRCFile -Encoding ASCII
Write-Output "$outputRCFile length = $($(Get-Item $outputRCFile).length)"
$headerContent | Out-File -FilePath $outputHeaderFile -Encoding ASCII
Write-Output "$outputHeaderFile length = $($(Get-Item $outputHeaderFile).length)"
$cppContent | Out-File -FilePath $outputCPPFile -Encoding ASCII
Write-Output "$outputCPPFile length = $($(Get-Item $outputCPPFile).length)"

Write-Output "Script completed successfully."