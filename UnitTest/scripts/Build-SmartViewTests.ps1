param (
    [string]$IntDir
)

$rootDir = Split-Path -Path $PSScriptRoot -Parent
$inSubDir = "SmartViewTestData\In"
$outSubDir = "SmartViewTestData\Out"
$inDir = "$rootDir\$inSubDir"
$outDir = "$rootDir\$outSubDir"
$outputHeaderFile = "$intDir\SmartViewTests.h"
$outputRCFile = "$intDir\SmartViewTests.rc"
$outputCPPFile = "$intDir\smartViewTest.cpp"

Write-Host "IntDir:           $IntDir"
Write-Host "inDir:            $inDir"
Write-Host "outDir:           $outDir"
Write-Host "outputHeaderFile: $outputHeaderFile"
Write-Host "outputRCFile:     $outputRCFile"
Write-Host "outputCPPFile:    $outputCPPFile"

if (-Not (Test-Path -Path $inDir)) {
    Write-Error "Smartview In directory does not exist: $inDir"
    exit 1
}
if (-Not (Test-Path -Path $outDir)) {
    Write-Error "Smartview Out directory does not exist: $outDir"
    exit 1
}

$defines = @()
$resources = @()
$tests = @()

$inDirfiles = Get-ChildItem -Path $inDir -File
$inDirPattern = "(\d+)-(.*?)(\d+)"

foreach ($file in $inDirfiles) {
    $name = $file.BaseName

    if ($name -match $inDirPattern) {
        $testNum = [int]$matches[1]
        $testName = $matches[2].ToUpper()
        $subIndex = [int]$matches[3]
        $index = $testNum * 1000 + $subIndex
        $name = "IDR_SV$($testNum)$($testName)$($subIndex)IN"
        $name = $name.ToUpper()
        $define = "#define $name $index"
        $defines += $define
        $resource = "$name TEXTFILE ""$inSubDir\$($file.Name)"""
        $resource = $resource -replace '\\', '/'
        $resources += $resource
        $test = "`tTEST($testNum, $testNum$testName, $subIndex)"
        $tests += $test
    }
}

$outDirFiles = Get-ChildItem -Path $outDir -File
$outDirPattern = "(\d+)-(.*?)-(.*?)(\d+)"

foreach ($file in $outDirFiles) {
    $name = $file.BaseName

    if ($name -match $outDirPattern) {
        $testNum = [int]$matches[1]
        $testName = $matches[2]
        $subIndex = [int]$matches[4]
        $index = 1000000 + $testNum * 1000 + $subIndex
        $name = "IDR_SV$($testNum)$($testName)$($subIndex)OUT"
        $name = $name.ToUpper()
        $define = "#define $name $index"
        $defines += $define
        $resource = "$name TEXTFILE ""$outSubDir\$($file.Name)"""
        $resource = $resource -replace '\\', '/'
        $resources += $resource
    }
}

$defines = $defines -join "`r`n"
$resources = $resources -join "`r`n"
$tests = $tests -join "`r`n"

# Generate the .h file
$headerContent = @"
// AUTOGENERATED FILE. DO NOT MODIFY.
// Used by $outputRCFile
#define TEXTFILE 256

$defines

// Next default values for new objects
//
#ifdef APSTUDIO_INVOKED
#ifndef APSTUDIO_READONLY_SYMBOLS
#define _APS_NEXT_RESOURCE_VALUE 102
#define _APS_NEXT_COMMAND_VALUE 40001
#define _APS_NEXT_CONTROL_VALUE 1001
#define _APS_NEXT_SYMED_VALUE 101
#endif
#endif
"@

# Generate the .rc file
$rcContent = @"
// AUTOGENERATED FILE. DO NOT MODIFY.
#include "$outputHeaderFile"

$resources
"@

# Generate the .cpp file
$cppContent = @"
// AUTOGENERATED FILE. DO NOT MODIFY.
#include <UnitTest/stdafx.h>
#include <UnitTest/UnitTest.h>
#include <$outputHeaderFile>

namespace SmartViewTest
{
#define TEST(PARSERTYPE, NAME, NUM) \
	TEST_METHOD(SV##NAME##PARSERTYPE##_##NUM) { unittest::test(static_cast<parserType>(##PARSERTYPE), IDR_SV##NAME##NUM##IN, IDR_SV##NAME##NUM##OUT); }

	TEST_CLASS(SmartViewTest)
	{
	private:
		// Without this, clang gets weird
		static const bool dummy_var = true;

	public:
		TEST_CLASS_INITIALIZE(initialize) { unittest::init(); }

		TEST_METHOD(SmartViewAddInTest1)
		{
			unittest::test(
				std::wstring(L"SmartViewAddInTest1"),
				parserType::END,
				std::vector<BYTE>{1, 2, 3, 4},
				std::wstring(L"Unknown Parser 39\r\n"
							 L"\tcb: 4 lpb: 01020304"));
		}

$tests
	};
} // namespace SmartViewTest
"@

$rcContent | Out-File -FilePath $outputRCFile -Encoding ASCII
Write-Host "$outputRCFile length = $($(Get-Item $outputRCFile).length)"
$headerContent | Out-File -FilePath $outputHeaderFile -Encoding ASCII
Write-Host "$outputHeaderFile length = $($(Get-Item $outputHeaderFile).length)"
$cppContent | Out-File -FilePath $outputCPPFile -Encoding ASCII
Write-Host "$outputCPPFile length = $($(Get-Item $outputCPPFile).length)"

Write-Output "Script completed successfully."
